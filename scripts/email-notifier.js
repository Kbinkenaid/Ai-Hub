const nodemailer = require('nodemailer');
const fs = require('fs');
const path = require('path');

class EmailNotifier {
  constructor() {
    this.emailTo = process.env.EMAIL_TO;
    this.emailFrom = process.env.EMAIL_FROM || 'ai-hub-automation@noreply.com';
    this.smtpHost = process.env.SMTP_HOST || 'smtp.gmail.com';
    this.smtpPort = process.env.SMTP_PORT || 587;
    this.smtpUser = process.env.SMTP_USER;
    this.smtpPass = process.env.SMTP_PASS;
  }

  createTransporter() {
    return nodemailer.createTransporter({
      host: this.smtpHost,
      port: this.smtpPort,
      secure: this.smtpPort === 465,
      auth: {
        user: this.smtpUser,
        pass: this.smtpPass
      }
    });
  }

  formatCategoryBreakdown(categories) {
    if (!categories || Object.keys(categories).length === 0) {
      return 'No new tools categorized';
    }

    return Object.entries(categories)
      .map(([category, count]) => `   • ${category.charAt(0).toUpperCase() + category.slice(1)}: ${count} tool${count !== 1 ? 's' : ''}`)
      .join('\n');
  }

  generateSuccessEmail(results) {
    const { newToolsCount, totalTools, categories, commitUrl, siteUrl } = results;
    const nextUpdate = new Date();
    nextUpdate.setDate(nextUpdate.getDate() + 7);

    return {
      subject: `🤖 AI Hub Weekly Update - ${new Date().toLocaleDateString('en-US', { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
      })}`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9;">
          <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; border-radius: 10px 10px 0 0; text-align: center;">
            <h1 style="color: white; margin: 0; font-size: 24px;">🤖 AI Hub Automation Report</h1>
            <p style="color: #e0e7ff; margin: 10px 0 0 0; font-size: 16px;">${new Date().toLocaleDateString('en-US', { 
              weekday: 'long',
              year: 'numeric', 
              month: 'long', 
              day: 'numeric' 
            })}</p>
          </div>
          
          <div style="background: white; padding: 30px; border-radius: 0 0 10px 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
            <div style="margin-bottom: 25px;">
              <div style="display: inline-block; background: #10b981; color: white; padding: 8px 16px; border-radius: 20px; font-weight: bold; margin-bottom: 15px;">
                ✅ Automation Completed Successfully
              </div>
            </div>

            <div style="background: #f0f9ff; border-left: 4px solid #0ea5e9; padding: 20px; margin: 20px 0; border-radius: 5px;">
              <h2 style="margin: 0 0 15px 0; color: #0c4a6e; font-size: 18px;">📊 Update Summary</h2>
              <div style="line-height: 1.8; color: #334155;">
                <strong>🆕 New Tools Added:</strong> ${newToolsCount} tool${newToolsCount !== 1 ? 's' : ''}<br>
                <strong>📂 Total Tools:</strong> ${totalTools}<br>
                <strong>📈 Categories Updated:</strong><br>
                ${this.formatCategoryBreakdown(categories)}
              </div>
            </div>

            <div style="background: #fefce8; border-left: 4px solid #eab308; padding: 20px; margin: 20px 0; border-radius: 5px;">
              <h3 style="margin: 0 0 15px 0; color: #92400e; font-size: 16px;">🔗 Quick Links</h3>
              <div style="line-height: 1.8;">
                ${commitUrl ? `<a href="${commitUrl}" style="color: #2563eb; text-decoration: none; font-weight: 500;">📝 View Changes on GitHub</a><br>` : ''}
                ${siteUrl ? `<a href="${siteUrl}" style="color: #2563eb; text-decoration: none; font-weight: 500;">🌐 Visit Live Site</a><br>` : ''}
              </div>
            </div>

            <div style="background: #f1f5f9; border-left: 4px solid #64748b; padding: 20px; margin: 20px 0; border-radius: 5px;">
              <h3 style="margin: 0 0 10px 0; color: #475569; font-size: 16px;">⏰ Next Scheduled Update</h3>
              <p style="margin: 0; color: #64748b; font-weight: 500;">${nextUpdate.toLocaleDateString('en-US', { 
                weekday: 'long',
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
              })}</p>
            </div>

            <div style="border-top: 1px solid #e2e8f0; padding-top: 20px; margin-top: 30px; text-align: center; color: #64748b; font-size: 14px;">
              <p style="margin: 0;">This email was automatically generated by your AI Hub automation system.</p>
              <p style="margin: 5px 0 0 0;">Developer notifications are sent only to you and are not visible to users.</p>
            </div>
          </div>
        </div>
      `,
      text: `
🤖 AI Hub Weekly Update - ${new Date().toLocaleDateString()}

✅ Automation Completed Successfully

📊 Update Summary:
• New Tools Added: ${newToolsCount}
• Total Tools: ${totalTools}
• Categories Updated:
${this.formatCategoryBreakdown(categories)}

🔗 Quick Links:
${commitUrl ? `• View Changes: ${commitUrl}` : ''}
${siteUrl ? `• Live Site: ${siteUrl}` : ''}

⏰ Next Update: ${nextUpdate.toLocaleDateString()}

This is an automated developer notification.
      `
    };
  }

  generateFailureEmail(error) {
    return {
      subject: '🚨 AI Hub Automation Failed',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9;">
          <div style="background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%); padding: 30px; border-radius: 10px 10px 0 0; text-align: center;">
            <h1 style="color: white; margin: 0; font-size: 24px;">🚨 AI Hub Automation Failed</h1>
            <p style="color: #fecaca; margin: 10px 0 0 0; font-size: 16px;">${new Date().toLocaleDateString()}</p>
          </div>
          
          <div style="background: white; padding: 30px; border-radius: 0 0 10px 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
            <div style="background: #fef2f2; border-left: 4px solid #ef4444; padding: 20px; margin: 20px 0; border-radius: 5px;">
              <h2 style="margin: 0 0 15px 0; color: #dc2626; font-size: 18px;">❌ Error Details</h2>
              <pre style="background: #f8fafc; padding: 15px; border-radius: 5px; overflow-x: auto; font-size: 14px; color: #475569;">${error.message}</pre>
            </div>

            <div style="background: #fefce8; border-left: 4px solid #eab308; padding: 20px; margin: 20px 0; border-radius: 5px;">
              <h3 style="margin: 0 0 15px 0; color: #92400e; font-size: 16px;">🔧 Recommended Actions</h3>
              <ul style="margin: 0; padding-left: 20px; color: #78716c;">
                <li>Check GitHub Actions logs for detailed error information</li>
                <li>Verify all environment variables are properly set</li>
                <li>Ensure target websites are accessible</li>
                <li>Check if rate limits have been exceeded</li>
              </ul>
            </div>

            <div style="border-top: 1px solid #e2e8f0; padding-top: 20px; margin-top: 30px; text-align: center; color: #64748b; font-size: 14px;">
              <p style="margin: 0;">This is an automated developer alert for immediate attention.</p>
            </div>
          </div>
        </div>
      `,
      text: `
🚨 AI Hub Automation Failed - ${new Date().toLocaleDateString()}

❌ Error: ${error.message}

🔧 Recommended Actions:
• Check GitHub Actions logs
• Verify environment variables
• Ensure target websites are accessible
• Check rate limits

This is an automated developer alert.
      `
    };
  }

  async sendSuccessNotification(results) {
    if (!this.emailTo) {
      console.log('EMAIL_TO not configured, skipping notification');
      return;
    }

    try {
      const transporter = this.createTransporter();
      const emailContent = this.generateSuccessEmail(results);

      const info = await transporter.sendMail({
        from: this.emailFrom,
        to: this.emailTo,
        subject: emailContent.subject,
        text: emailContent.text,
        html: emailContent.html
      });

      console.log('Success notification sent:', info.messageId);
    } catch (error) {
      console.error('Failed to send success notification:', error);
    }
  }

  async sendFailureNotification(error) {
    if (!this.emailTo) {
      console.log('EMAIL_TO not configured, skipping failure notification');
      return;
    }

    try {
      const transporter = this.createTransporter();
      const emailContent = this.generateFailureEmail(error);

      const info = await transporter.sendMail({
        from: this.emailFrom,
        to: this.emailTo,
        subject: emailContent.subject,
        text: emailContent.text,
        html: emailContent.html
      });

      console.log('Failure notification sent:', info.messageId);
    } catch (emailError) {
      console.error('Failed to send failure notification:', emailError);
    }
  }
}

module.exports = EmailNotifier;

// Export for testing
if (require.main === module) {
  const notifier = new EmailNotifier();
  
  // Test success notification
  const testResults = {
    newToolsCount: 5,
    totalTools: 28,
    categories: {
      'productivity': 2,
      'design': 2,
      'development': 1
    },
    commitUrl: 'https://github.com/Kbinkenaid/Ai-Hub/commit/abc123',
    siteUrl: 'https://your-site.vercel.app'
  };

  notifier.sendSuccessNotification(testResults)
    .then(() => console.log('Test email sent successfully'))
    .catch(error => console.error('Test email failed:', error));
}